{"version":3,"sources":["component/Weather.jsx","component/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","iconWeather","celcius","min","max","minmaxTemp","temp_min","temp_max","description","Form","formSubmit","error","role","type","name","placeholder","autoComplete","onChange","onChangeValue","onClick","submitForm","state","bind","event","target","value","this","setState","e","preventDefault","data","loadWeather","React","Component","App","getWeather","a","apiURL","fetch","api_call","json","response","console","log","sys","main","calCelcius","temp","weather","get_WeatherIcon","weatherIcon","id","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ec87b23.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1 className=\"city\">{props.city},{props.country}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <span><i className={`wi ${props.iconWeather} display-1`} /></span>\r\n                </h5>\r\n                <h4>{props.celcius ? (<h1 className=\"py-2\">{props.celcius}&deg;</h1>) : null}</h4>\r\n\r\n                {/* show max and min temp */}\r\n                <h4>{minmaxTemp(props.temp_min, props.temp_max)}</h4>\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"py-4\">Min: {min}&deg;</span><br></br>\r\n                <span className=\"py-4\">Max: {max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            city: '',\r\n            country: ''\r\n        }\r\n        this.onChangeValue = this.onChangeValue.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n\r\n    onChangeValue(event) {\r\n        var name = event.target.name;\r\n        var value = event.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    submitForm(e) {\r\n        e.preventDefault();\r\n        const data = {\r\n            city: this.state.city,\r\n            country: this.state.country\r\n        }\r\n        this.props.loadWeather(e, data);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.formSubmit()\r\n        );\r\n    }\r\n\r\n    formSubmit = () => {\r\n        return (\r\n            <div className=\"form myform\">\r\n                <div>{this.props.error ? error() : null}</div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3\">\r\n                        <span className=\"label label-success mr-20\">City</span>\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\" autoComplete=\"off\" onChange={this.onChangeValue} />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <span className=\"label label-success mr-20\">Country</span>\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\" autoComplete=\"off\" onChange={this.onChangeValue} />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <button className=\"btn btn-warning mr-10\" onClick={this.submitForm} >Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction error() {\r\n        return (\r\n            <div className=\"alert alert-warning error\" role=\"alert\">\r\n                Please Enter City And Country\r\n            </div>\r\n        )\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './component/Weather';\nimport Form from './component/Form';\nconst API_key = '88b4b25038244d071f187242bdc98206';\nconst URL = 'http://api.openweathermap.org/data/2.5/';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      country: '',\n      iconWeather: '',\n      main: {},\n      celcius: 0,\n      temp_min: undefined,\n      temp_max: undefined,\n      description: '',\n      error: false\n    }\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    }\n  }\n\n  calCelcius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  getWeather = async (event, data) => {\n    event.preventDefault();\n    if (data.city && data.country) {\n      const apiURL = URL + `weather?q=${data.city},${data.country}&appid=${API_key}`;\n      const api_call = await fetch(apiURL);\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        main: response.main,\n        celcius: this.calCelcius(response.main.temp),\n        temp_min: this.calCelcius(response.main.temp_min),\n        temp_max: this.calCelcius(response.main.temp_max),\n        description: response.weather[0].description\n      })\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n    } else {\n      this.setState({\n        error: true\n      })\n    }\n\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          iconWeather={this.state.icon}\n          main={this.state.main}\n          celcius={this.state.celcius}\n          temp_min={this.state.temp_min}\n          temp_max={this.state.temp_max}\n          description={this.state.description} />\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}